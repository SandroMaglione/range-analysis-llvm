entry:
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %k.0 = phi i32 [ 0, %entry ], [ %add2, %if.end ]
  %cmp = icmp slt i32 %k.0, 100
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %cmp1 = icmp slt i32 0, %k.0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %add = add nsw i32 0, 1
  %sub = sub nsw i32 %k.0, 1
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %add2 = add nsw i32 %k.0, 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret i32 %k.0


workList = [ entry ] // First BB inside list
listRange = { entry: [] } // Ranges in input to each BB
listCmp = []

while (workList.isNotEmpty):
    BB = workList.first
    for (inst i: BB):
        // --- BRANCH --- //
        if (i is 'br'):
            if (i is 'simple'): // No if, while, for (only one label)
                if (label not in listRange): // Don't visited already
                    workList.add(BB)
            else if (i is 'complex'):
                rCmp = listCmp.removeAndGetLast()
                rangeBr0 = COMBINE(listRange[BB], rCmp.if)
                rangeBr1 = COMBINE(listRange[BB], rCmp.else)

                // Add to workList
                if (rangeBr0 != prevRange):
                    listRange[rCmp.if].updateRanges(rangeBr0)
                    workList.add(rCmp.if)
                if (rangeBr1 != prevRange):
                    listRange[rCmp.else].updateRanges(rangeBr1)
                    workList.add(rCmp.else)
        
        // --- COMPARISON --- //
        if (i is 'cmp'):
            listCmp.add(ope0, ope1, comparison) // comparison: '<', '>', '<=', '>='

        // --- PHI --- //
        if (is is Phi):
            rangePhi = COMBINE(i.phi0, i.phi1)
            listRange[BB].updateRanges(rangePhi)
