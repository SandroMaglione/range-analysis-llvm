%retval = alloca i32, align 4
%a = alloca i32, align 4
%b = alloca i32, align 4
%c = alloca i32, align 4
store i32 0, i32* %retval, align 4
store i32 0, i32* %a, align 4
store i32 10, i32* %b, align 4
%0 = load i32, i32* %a, align 4
%add = add nsw i32 %0, 3
store i32 %add, i32* %c, align 4
ret i32 0

for (all instructions: i) {
    if (i -> Store: s) {
        if (s.oper0() -> const) {
            ADD(oper1, const, const); // Found range value of oper1
        } else {
            REF(oper1, oper0); // Dependency of oper2 on oper0
        }
    }
}

--ITER0
%retval = 0
%a = 0
%b = 0
%c = %add

--ITER1
%add = %0 + 3
%c = %0 + 3

--ITER2
%0 = %a
%c = %a + 3